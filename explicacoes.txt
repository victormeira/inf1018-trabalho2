EXPLICACOES

RETORNO: ret varpc
	1) Movemos o varpc dado para %eax.
		Se constante: ret $c
			movl $N, %eax		- {0xB8, N in Little Endian (4 bytes)}
		Se parametro: ret pi (0 <= i <= 2)
			movl %edi, %eax		- {0x89, 0xF8}
			movl %esi, %eax		- {0x89, 0xF0}
			movl %edx, %eax		- {0x89, 0xD0}
		Se var local: ret vi (0 <= i <= 19)
			(idx nos da pos na pilha -> pospilha = 4*idx)
			movl -N(%rbp), %eax	- {0x8B, 0x45, -N como signed}
	2) Colocamos leave e ret no final
		leave				- {0xC9}
		ret 				- {0xC3}

ATRIBUICAO: vi = varpc1 op varpc2 (0 <= i <= 19)
	1) Movemos o varpc1 para um registrador auxiliar %eax.
		Se constante: $c
			movl $N, %eax		- {0xB8, N in Little Endian (4 bytes)}
		Se parametro: pi (0 <= i <= 2)
			movl %edi, %eax		- {0x89, 0xF8}
			movl %esi, %eax		- {0x89, 0xF0}
			movl %edx, %eax		- {0x89, 0xD0}
		Se var local: vi (0 <= i <= 19)
			movl -N(%rbp), %eax	- {0x8B, 0x45, -N como signed}
	2) Movemos o varpc2 para o registrador auxiliar %ecx
	Se constante: $c
			movl $N, %ecx		- {0xB9, N in Little Endian (4 bytes)}
		Se parametro: pi (0 <= i <= 2)
			movl %edi, %ecx		- {0x89, 0xF9}
			movl %esi, %ecx		- {0x89, 0xF1}
			movl %edx, %ecx		- {0x89, 0xD1}
		Se var local: vi (0 <= i <= 19)
			movl -N(%rbp), %ecx	- {0x8B, 0x4D, -N como signed}
	3) Fazemos a operacao op entre %eax e %ecx
		Se +: vi = varpc + varpc (0 <= i <= 19)
			addl %ecx, %eax		- {0x01, 0xC8}
		Se -: vi = varpc - varpc (0 <= i <= 19)
			subl %ecx, %eax		- {0x29, 0xC8}
		Se *: vi = varpc * varpc (0 <= i <= 19)
			imull %ecx, %eax	- {0x0F, 0xAF, 0xC1}

	3) Movemos de %eax para var na pos pilha idx dado.
		Se idx for "nova":
			Se mod 4 idx for 0:
				subq $16, %rsp		- {0x48, 0x83, 0xEC, 0x10}
		movl %eax, -N(%rbp)			- {0x89, 0x45, -N como signed}

IF:
	1) Aloca 10 pos no vetor Cod
	2) Compara var com 0
		cmpl $0, -N(%rbp)	- {0x83, 0x7D, -N como signed, 0x00}
	3) Coloca no vetor Cod os comandos e a linha que deveria ir no lugar dos offset
		jl	L 				- {0x7c, LINHA QUE DEVERIA PULAR}
		je	L 				- {0x74, LINHA QUE DEVERIA PULAR}
		jg	L 				- {0x7F, LINHA QUE DEVERIA PULAR}
	4) Marca no vetor ifcontrol que na linha i tem if
		control_if[i-1] = 1
	5) Ao final do arquivo, percorre vetor ifcontrol.
		Se tiver if na linha:
			Usa linecontrol, para ir pra pos da linha no vetor cod.
			Pula +5 pos.
			(*1)Calcula offset entre pos atual e pos da linha guardada (note que e menos 1 pois nao conta no offset a var que esta)
				(linecontrol[cod[pos]-1] - pos) - 1
			(*2)Poe no vetor cod como signed.
			Pula +2 pos.
			Repete(*1) e (*2)
			Pula +2 pos
			Repete(*1) e (*2)






	
